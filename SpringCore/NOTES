==> FileSystemXmlApplicationContext class is used when the configuration file outside the project
			FileSystemXmlApplicationContext context=new FileSystemXmlApplicationContext("classpath:applicationContext.xml");
			
==> ClassPathXmlApplicationContext context=new ClassPathXmlApplicationContext("applicationContext.xml");
	Used when configuration file is within the project	
	
==> AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext(App.class);
    when we do not use any configuration file at all. And configuration is done in the .java files through annotations.
    XML based configuration(Dispatcher-servlet.xml) is being redundant slowly because changes made by different developers
    working on the same file can lead to conflicts.
    
==> @ComponentScan("com.example.candidjaca") in .java file is equivalent to <context:component-scan base-package="com.example.candidjaca" />
   in xml file.
    
==> @scope("Singleton") : specifies that the object would be singleton. Default value for @scope is singleton only
          UserService us1=(UserService) context.getBean("userServiceImpl");
          UserService us2=(UserService) context.getBean("userServiceImpl");
    us1 and us2 would give same hashcode values.
    @scope("prototype") : specifies that the object would be different every time.
    us1 and us2 would give different hashcode values.
    
==> @Configuration: Used to indicate that a class declares one or more @Bean methods.
    These classes are processed by the Spring container to generate bean definitions and 
    service requests for those beans at runtime.
    
==> myString in UserServiceImpl has been declared with @Autowired annotation.
    And instead of mentioning the bean tag in xml file, we have used @Bean annotation above a method
    that provides myString a value.
            @Bean
      		public String myStringmethod()
      			{
         			 String s1="ankita";
         			 return s1;
    			 } 
    			 
==> @Bean annotation also can be used with parameters like name, initMethod and destroyMethod.
    name – allows you give name for bean
    initMethod – allows you to choose method which will be invoked on context register
    destroyMethod – allows you to choose method which will be invoked on context shutdown
    @Bean(name = "comp", initMethod = "turnOn", destroyMethod = "turnOff")
    			 
